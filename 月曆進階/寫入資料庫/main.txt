using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;

class CalendarApp
{
    private static List<Event> events = new List<Event>();
    private static readonly string connectionString = "Server=localhost;Database=CalendarDB;Trusted_Connection=True;"; // 修改為你的連線字串

    class Event
    {
        public int EventId { get; set; }
        public DateTime EventDateTime { get; set; }
        public string EventDescription { get; set; }
    }

    static void Main()
    {
        LoadEventsFromDatabase();

        while (true)
        {
            Console.Clear();
            Console.WriteLine("\n選擇操作：");
            Console.WriteLine("1. 輸入年月，查看該月份月曆");
            Console.WriteLine("2. 設定未來事件");
            Console.WriteLine("3. 顯示所有事件");
            Console.WriteLine("4. 更新事件");
            Console.WriteLine("5. 刪除事件");
            Console.WriteLine("6. 離開");

            Console.Write("\n請輸入選項（1-6，按 Backspace 返回）：");
            string choice = ReadLineWithBackspace();
            if (choice == null) return;

            switch (choice)
            {
                case "1": ShowMonthlyCalendar(); break;
                case "2": AddEvent(); break;
                case "3": ShowAllEvents(); break;
                case "4": UpdateEvent(); break;
                case "5": DeleteEvent(); break;
                case "6":
                    Console.WriteLine("程式結束。");
                    Console.ReadLine();
                    return;
                default:
                    Console.WriteLine("無效選項，請重新輸入！");
                    Console.ReadLine();
                    break;
            }
        }
    }

    static void LoadEventsFromDatabase()
    {
        events.Clear();
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT EventId, EventDateTime, EventDescription FROM Events";
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            events.Add(new Event
                            {
                                EventId = reader.GetInt32(0),
                                EventDateTime = reader.GetDateTime(1),
                                EventDescription = reader.GetString(2)
                            });
                        }
                    }
                }
            }
            Console.WriteLine("已從資料庫載入事件。");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入事件時發生錯誤：{ex.Message}");
        }
    }

    static void SaveEventToDatabase(DateTime dateTime, string description)
    {
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "INSERT INTO Events (EventDateTime, EventDescription) VALUES (@EventDateTime, @EventDescription); " +
                               "SELECT SCOPE_IDENTITY();";
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@EventDateTime", dateTime);
                    cmd.Parameters.AddWithValue("@EventDescription", description);
                    int newId = Convert.ToInt32(cmd.ExecuteScalar());
                    events.Add(new Event { EventId = newId, EventDateTime = dateTime, EventDescription = description });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"儲存事件時發生錯誤：{ex.Message}");
        }
    }

    static void UpdateEventInDatabase(int eventId, DateTime newDateTime, string newDescription)
    {
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "UPDATE Events SET EventDateTime = @NewDateTime, EventDescription = @NewDescription WHERE EventId = @EventId";
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@NewDateTime", newDateTime);
                    cmd.Parameters.AddWithValue("@NewDescription", newDescription);
                    cmd.Parameters.AddWithValue("@EventId", eventId);
                    cmd.ExecuteNonQuery();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"更新事件時發生錯誤：{ex.Message}");
        }
    }

    static void DeleteEventFromDatabase(int eventId)
    {
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "DELETE FROM Events WHERE EventId = @EventId";
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@EventId", eventId);
                    cmd.ExecuteNonQuery();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"刪除事件時發生錯誤：{ex.Message}");
        }
    }

    static void DeleteAllEventsFromDatabase()
    {
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "DELETE FROM Events";
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.ExecuteNonQuery();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"刪除所有事件時發生錯誤：{ex.Message}");
        }
    }

    static string ReadLineWithBackspace()
    {
        string input = "";
        while (true)
        {
            var key = Console.ReadKey(true);
            if (key.Key == ConsoleKey.Enter)
            {
                Console.WriteLine();
                return input;
            }
            if (key.Key == ConsoleKey.Backspace)
            {
                if (input.Length > 0)
                {
                    input = input.Substring(0, input.Length - 1);
                    Console.Write("\b \b");
                }
                else return null;
            }
            else
            {
                input += key.KeyChar;
                Console.Write(key.KeyChar);
            }
        }
    }

    static void ShowMonthlyCalendar()
    {
        Console.Write("請輸入年份（YYYY，按 Backspace 返回主選單）：");
        string yearInput = ReadLineWithBackspace();
        if (yearInput == null) return;
        if (!int.TryParse(yearInput, out int year))
        {
            Console.WriteLine("年份格式無效！");
            Console.ReadLine();
            return;
        }

        Console.Write("請輸入月份（1-12，按 Backspace 返回主選單）：");
        string monthInput = ReadLineWithBackspace();
        if (monthInput == null) return;
        if (!int.TryParse(monthInput, out int month) || month < 1 || month > 12)
        {
            Console.WriteLine("月份必須在1-12之間！");
            Console.ReadLine();
            return;
        }

        while (true)
        {
            Console.Clear();
            Console.WriteLine($"\n{year} 年 {month} 月");
            Console.WriteLine("日 一 二 三 四 五 六");

            DateTime firstDay = new DateTime(year, month, 1);
            int startDay = (int)firstDay.DayOfWeek;
            int daysInMonth = DateTime.DaysInMonth(year, month);

            for (int i = 0; i < startDay; i++) Console.Write("   ");

            for (int day = 1; day <= daysInMonth; day++)
            {
                DateTime currentDate = new DateTime(year, month, day);
                bool hasEvent = events.Any(e => e.EventDateTime.Date == currentDate.Date);

                Console.ForegroundColor = hasEvent ? ConsoleColor.Yellow : ConsoleColor.White;
                Console.Write(hasEvent ? $"[{day,2}]" : $"{day,2} ");
                Console.ResetColor();

                if ((startDay + day) % 7 == 0 || day == daysInMonth) Console.WriteLine();
            }

            Console.Write("\n輸入日期（1-31）查看事件，或按 `Backspace` 返回主選單：");
            var key = Console.ReadKey(true);

            if (key.Key == ConsoleKey.Backspace) return;

            if (int.TryParse(key.KeyChar.ToString(), out int selectedDay) &&
                selectedDay >= 1 && selectedDay <= daysInMonth)
            {
                DateTime selectedDate = new DateTime(year, month, selectedDay);
                ShowEvents(selectedDate);
            }
        }
    }

    static void ShowEvents(DateTime date)
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine($"\n{date:yyyy-MM-dd} 的事件：");

            var dayEvents = events.Where(e => e.EventDateTime.Date == date.Date).OrderBy(e => e.EventDateTime);
            if (dayEvents.Any())
            {
                foreach (var evt in dayEvents)
                {
                    Console.WriteLine($"   {evt.EventDateTime:HH:mm} - {evt.EventDescription}");
                }
            }
            else
            {
                Console.WriteLine("這一天沒有事件。");
            }

            Console.Write("\n按 `Backspace` 返回月曆：");
            var key = Console.ReadKey(true);
            if (key.Key == ConsoleKey.Backspace) return;
        }
    }

    static void AddEvent()
    {
        Console.Write("請輸入事件日期和時間（YYYY-MM-DD HH:MM，按 Backspace 返回主選單）：");
        string dateTimeInput = ReadLineWithBackspace();
        if (dateTimeInput == null) return;

        if (!DateTime.TryParse(dateTimeInput, out DateTime dateTime))
        {
            Console.WriteLine("日期時間格式無效！請使用 YYYY-MM-DD HH:MM 格式");
            Console.ReadLine();
            return;
        }

        while (true)
        {
            Console.Write("請輸入事件內容（按 Backspace 返回主選單）：");
            string description = ReadLineWithBackspace();
            if (description == null) return;
            if (string.IsNullOrWhiteSpace(description))
            {
                Console.WriteLine("事件內容不能為空！");
                Console.ReadLine();
                continue;
            }
            SaveEventToDatabase(dateTime, description);

            Console.Write("是否繼續新增事件？(Y/N，按 Backspace 返回主選單): ");
            string response = ReadLineWithBackspace();
            if (response == null) return;
            response = response.Trim().ToUpper();
            if (response != "Y")
            {
                Console.WriteLine("事件已新增，返回主選單...");
                Console.ReadLine();
                return;
            }
        }
    }

    static void ShowAllEvents()
    {
        Console.Clear();
        if (events.Count == 0)
        {
            Console.WriteLine("目前沒有任何事件！");
        }
        else
        {
            foreach (var evt in events.OrderBy(e => e.EventDateTime))
            {
                Console.WriteLine($"{evt.EventDateTime:yyyy-MM-dd HH:mm} - {evt.EventDescription}");
            }
        }
        Console.Write("\n按 `Enter` 返回主選單...");
        Console.ReadLine();
    }

    static void UpdateEvent()
    {
        Console.Write("請輸入要修改的事件 ID（按 Backspace 返回主選單）：");
        string idInput = ReadLineWithBackspace();
        if (idInput == null) return;

        if (!int.TryParse(idInput, out int eventId) || !events.Any(e => e.EventId == eventId))
        {
            Console.WriteLine("無效的事件 ID 或該事件不存在！");
            Console.ReadLine();
            return;
        }

        var eventToUpdate = events.First(e => e.EventId == eventId);
        Console.WriteLine($"當前事件：{eventToUpdate.EventDateTime:yyyy-MM-dd HH:mm} - {eventToUpdate.EventDescription}");

        Console.Write("請輸入新的事件日期和時間（YYYY-MM-DD HH:MM，按 Backspace 返回主選單）：");
        string newDateTimeInput = ReadLineWithBackspace();
        if (newDateTimeInput == null) return;

        if (!DateTime.TryParse(newDateTimeInput, out DateTime newDateTime))
        {
            Console.WriteLine("新日期時間格式無效！");
            Console.ReadLine();
            return;
        }

        Console.Write("請輸入新事件內容（按 Backspace 返回主選單）：");
        string newDescription = ReadLineWithBackspace();
        if (newDescription == null) return;

        if (string.IsNullOrWhiteSpace(newDescription))
        {
            Console.WriteLine("事件內容不能為空！");
            Console.ReadLine();
            return;
        }

        events.Remove(eventToUpdate);
        events.Add(new Event { EventId = eventId, EventDateTime = newDateTime, EventDescription = newDescription });
        UpdateEventInDatabase(eventId, newDateTime, newDescription);
        Console.WriteLine("事件已更新！");
        Console.ReadLine();
    }

    static void DeleteEvent()
    {
        Console.Write("請輸入事件 ID（按 Backspace 返回主選單），或輸入 `ALL` 刪除所有事件：");
        string input = ReadLineWithBackspace();
        if (input == null) return;

        if (input.ToUpper() == "ALL")
        {
            events.Clear();
            DeleteAllEventsFromDatabase();
            Console.WriteLine("已刪除所有行程！");
            Console.ReadLine();
            return;
        }

        if (!int.TryParse(input, out int eventId) || !events.Any(e => e.EventId == eventId))
        {
            Console.WriteLine("無效的事件 ID 或該事件不存在！");
            Console.ReadLine();
            return;
        }

        var eventToDelete = events.First(e => e.EventId == eventId);
        events.Remove(eventToDelete);
        DeleteEventFromDatabase(eventId);
        Console.WriteLine("事件已刪除！");
        Console.ReadLine();
    }
}